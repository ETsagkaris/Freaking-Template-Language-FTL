import inspect

from ftl.internal.utils import (
    namespace_to_doc,
    fillChoice,
    add_actions,
    add_fieldsets,
    add_next_step_spec,
    ensure_no_input_fields,
)


def TEMPLATE(
    refname,
    steps_spec,
    owner="System",
    caption=None,
    shortname=None,
    description=None,
    requires_case=False,
    is_official=False,
    action_on_issue=None,
    validation_policy=None,
    validation_context=None,
    index_by_fields=None,
    extra_required_claims=[],
    exempted_claims=[],
    case_prefixes=[],
    reply_templates=[],
):
    if caption:
        shortname = caption if not shortname else shortname
        description = caption if not description else description

    tmp = {
        "refname": refname,
        "steps_spec": steps_spec,
        "owner": owner,
        "shortname": shortname,
        "description": description,
        "requires_case": requires_case,
        "is_official": is_official,
        "action_on_issue": action_on_issue,
        "validation_policy": validation_policy,
        "validation_context": validation_context,
        "index_by_fields": index_by_fields,
        "extra_required_claims": extra_required_claims,
        "exempted_claims": exempted_claims,
        "case_prefixes": case_prefixes,
        "reply_templates": reply_templates,
    }

    template = {}
    for key, value in tmp.items():
        if value is not None:
            template[key] = value
    return template


def STEPS_SPEC(
    steps_ns,
    first_step,
    common_props=None,
    intro_step_ns=None,
    collectable=None,
    sign=None,
    scoped_permission_hook=None,
):
    """Generate a template steps_spec document

    Arguments:

      - steps_ns: A dict mapping step names (possibly containing a scope
        suffix) to their spec in namespace format.
      - common_props: A useful extra, provide a spec in namespace format
        to be applied to all steps.
    """
    steps = {}

    for step_name, step_ns_spec in steps_ns.items():
        if common_props:
            for key, value in common_props.items():
                if step_ns_spec.get(key, "missing") != "missing":
                    step_ns_spec[key] = value
        steps[step_name] = namespace_to_doc(step_ns_spec)

    tmp = {
        "steps": steps,
        "steps-order": first_step,
        "collectable": collectable,
        "sign": sign,
        "scoped-permission-hook": scoped_permission_hook,
    }

    steps_spec = {}
    for key, value in tmp.items():
        if value is not None:
            steps_spec[key] = value

    if intro_step_ns:
        if common_props:
            intro_step_ns.update(common_props)
        intro_step = namespace_to_doc(intro_step_ns)
        steps_spec["intro-step"] = intro_step

    return steps_spec


def STEP(
    actions,
    fieldsets,
    step_type=None,
    title=None,
    captionLeft=None,
    serviceName=None,
    serviceURL=None,
    serviceLogo=None,
    serviceLogoURL=None,
    footerContent=None,
    footerLogo=None,
    footerTop=None,
    termsTitle=None,
    termsURL=None,
    fontName=None,
    page_numbering=None,
    signature_position=None,
    signature_page=None,
    state_label=None,
    sidebar_state_label=None,
    sidebar_refcode_label=None,
    sidebar_template_label=None,
    sidebar_issuedate_label=None,
    success_message=None,
    success_code_message=None,
    pagesize=None,
    field_compute_order=None,
    next_step=None,
    decide_next_step=None,
    possible_next_steps=None,
    pre_access_hook=None,
    validator=None,
    is_final_view=None,
    validation_dynamic_info=None,
    has_display_fields=None,
    ensure_no_input=False,
    targets=None,  #
    as_manifest_for_attachment=None,
    #   field_name
    #   retrieval_scope
    #   manifest-position
    #   attachment-handler
    layout=None,
    #   grid
    #   xs
    #   sm
    #   md
    #   xl
):
    """Create a step spec in namespace format.

    Arguments:

      - fieldsets: A list of fieldset subspecs generated by
      generate_fieldset_ns(). The generated step contains the input fieldsets
      in the given order for all display modes.
      - step_type: form or view. Defines the web component of the included
        fieldsets.
      - step_title: the (greek) label for the step, for all display modes
      - actions: list of action specs in namespace format. The actions are
        displayed in the given order.
      - next_step: Specification of the next step: either a string if the
        next step name is known statically or a tuple
        (path_to_decide_next_step, possible_steps_tuple) or None if there is
        no next step.
      - ensure_no_input: bool ensures noinput fields in step
      - is_final_view: bool enforces issue of declaration in step (useful in
       cases of update action that may or may not end you up in a final_view,
       so it should not automatically issue the declaration)

    """
    if as_manifest_for_attachment:
        if "manifest_position" in as_manifest_for_attachment:
            as_manifest_for_attachment[
                "manifest_position"
            ] = as_manifest_for_attachment.pop("manifest-position")
        if "attachment_handler" in as_manifest_for_attachment:
            as_manifest_for_attachment[
                "attachment_handler"
            ] = as_manifest_for_attachment.pop("attachment-handler")

    tmp = {
        "display/default/el/title": title,
        "display/default/el/captionLeft": captionLeft,
        "display/default/el/serviceName": serviceName,
        "display/default/el/serviceURL": serviceURL,
        "display/default/el/serviceLogo": serviceLogo,
        "display/default/el/serviceLogoURL": serviceLogoURL,
        "display/default/el/footerContent": footerContent,
        "display/default/el/footerLogo": footerLogo,
        "display/default/el/footerTop": footerTop,
        "display/default/el/termsTitle": termsTitle,
        "display/default/el/termsURL": termsURL,
        "display/default/el/fontName": fontName,
        "display/default/el/page-numbering": page_numbering,
        "display/default/el/signature-position": signature_position,
        "display/default/el/signature-page": signature_page,
        "display/default/el/state-label": state_label,
        "display/default/el/sidebar-state-label": sidebar_state_label,
        "display/default/el/sidebar-refcode-label": sidebar_refcode_label,
        "display/default/el/sidebar-template-label": sidebar_template_label,
        "display/default/el/sidebar-issuedate-label": sidebar_issuedate_label,
        "display/default/el/success-message": success_message,
        "display/default/el/success-code-message": success_code_message,
        "display/default/el/as-manifest-for-attachment": as_manifest_for_attachment,
        "display/default/el/layout": layout,
        "display/default/el/pagesize": pagesize,

        "field-compute-order": field_compute_order,
        "pre_access_hook": pre_access_hook,
        "validator": validator,
        "is-final-view": is_final_view,
        "validation_dynamic_info": validation_dynamic_info,
        "has-display-fields": has_display_fields,
        "targets": targets,

        "action-order": [],
        "fieldset-order": [],
    }

    step_spec = {}
    for key, value in tmp.items():
        if value is not None:
            step_spec[key] = value

    add_actions(step_spec, actions)  # adds actions, makes action-order
    add_fieldsets(step_spec, step_type, fieldsets)  # adds fieldsets (they add their fields), makes fieldset-order
    add_next_step_spec(step_spec, next_step, decide_next_step, possible_next_steps)  # add next_step or decide_next_step
    if ensure_no_input:
        ensure_no_input_fields(step_spec)  # make all fields no-input
    return step_spec


def FIELDSET(
    fieldset_name,
    fields,
    title=None,
    component=None,
    layout=None,  # has structure
    params=None,  # has structure
):
    """Given a list of specified fields, it creates a document in namespace
    format meant to be used as part of a step specification.

    It describes:
      - the fieldset name and default/el/title,
      - the fieldset field-order, in the order given by the fields input,
      - the fields that are contained in the fieldset.

    The fields input parameter is a list of field specs
    The params is a dict that will be used in component_params
    """

    tmp = {
        f"fieldsets/{fieldset_name}/display/default/el/title": title,
        f"fieldsets/{fieldset_name}/field-order": []
    }
    if component == "form":
        tmp.update({
            f"fieldsets/{fieldset_name}/display/default/el/component": component,
            f"fieldsets/{fieldset_name}/display/pdf/el/component": "values-list",
        })
    else:
        tmp.update({
            f"fieldsets/{fieldset_name}/display/default/el/component": "values-list",
            f"fieldsets/{fieldset_name}/display/pdf/el/component": component,
        })

    fieldset_spec = {}
    for key, value in tmp.items():
        if value is not None:
            fieldset_spec[key] = value

    for field_ns in fields:
        some_field_key = list(field_ns.keys())[0]
        field_name = some_field_key.split("/")[1]
        fieldset_spec.update(field_ns)
        fieldset_spec[
            f"fieldsets/{fieldset_name}/field-order"
        ].append(field_name)

    fieldset_spec[f"fieldsets/{fieldset_name}/field-order"] = " ".join(
        fieldset_spec[f"fieldsets/{fieldset_name}/field-order"])

    if layout:
        for key, value in layout.items():
            fieldset_spec.update({f"fieldsets/{fieldset_name}/display/default/el/layout/{key}": value})

    if params:
        for key, value in params.items():
            fieldset_spec.update({f"fieldsets/{fieldset_name}/display/default/el/component-params/{key}": value})

    return fieldset_spec


def FIELD(
    field_name,
    title=None,
    user_input_mode="required",
    component="string",
    attribute=None,
    datatype=None,
    value=None,
    default_value=None,
    default_on_empty=None,
    safe=None,
    choices_source_fn=None,
    dataset_source_fn=None,
    sources=None,
    value_constructor=None,
    is_display_field=None,
    validation_download_attachment_fn=None,
    hint=None,
    hint_md=None,
    template_hint=None,
    example=None,
    value_md=None,
    title_md=None,
    layout=None,  #
    choices=None,  #
    params=None,  #
    display_mode="default",
):
    tmp = {
        f"fields/{field_name}/user-input-mode": user_input_mode,
        f"fields/{field_name}/attribute": attribute,
        f"fields/{field_name}/datatype": datatype,
        f"fields/{field_name}/value": value,
        f"fields/{field_name}/default-value": default_value,
        f"fields/{field_name}/default-on-empty": default_on_empty,
        f"fields/{field_name}/safe": safe,
        f"fields/{field_name}/sources": sources,
        f"fields/{field_name}/value-constructor": value_constructor,
        f"fields/{field_name}/choices-source-fn": choices_source_fn,
        f"fields/{field_name}/dataset-source-fn": dataset_source_fn,
        f"fields/{field_name}/is-display-field": is_display_field,
        f"fields/{field_name}/validation-download-attachment-fn": validation_download_attachment_fn,
        f"fields/{field_name}/display/{display_mode}/el/title": title,
        f"fields/{field_name}/display/{display_mode}/el/hint": hint,
        f"fields/{field_name}/display/{display_mode}/el/hint_md": hint_md,
        f"fields/{field_name}/display/{display_mode}/el/template_hint": template_hint,
        f"fields/{field_name}/display/{display_mode}/el/example": example,
        f"fields/{field_name}/display/{display_mode}/el/value_md": value_md,
        f"fields/{field_name}/display/{display_mode}/el/title_md": title_md,
        f"fields/{field_name}/display/{display_mode}/el/component": component,
    }

    param_mapping = {
        "format_title": "format-title",
        "later_pages": "later-pages",
        "value_extractor": "value-extractor",
        "countries_allowed": "countries-allowed",
        "persist_key": "persist-key",
        "file_max_size": "file-max-size",
        "image_src_field_name": "image-src-field-name",
        "legacy_mode": "legacy-mode",
        "dataset_filter_field": "dataset-filter-field",
        "dependencies_error_message": "dependencies-error-message",
        "param_name": "param-name",
        "display_values": "display-values",
        "data_label": "data-label",
        "transaction_label": "transaction-label",
        "recipient_label": "recipient-label",
    }

    field_spec = {}
    for key, value in tmp.items():
        if value is not None:
            field_spec[key] = value

    if choices:
        fillChoice(field_spec, field_name, choices, mode=display_mode)
    if layout:
        for key, value in layout.items():
            field_spec.update({f"fields/{field_name}/display/{display_mode}/el/layout/{key}": value})
    if params:
        for key, value in params.items():
            key = param_mapping.get(key, key)
            field_spec.update({f"fields/{field_name}/display/{display_mode}/el/component-params/{key}": value})

    return field_spec


def ACTION(
    action_name,
    component=None,
    label=None,
    icon=None,
    title=None,
    helptext=None,
    primary=None,
    url=None,
    is_self=None,
    confirm_confirm_label=None,
    confirm_cancel_label=None,
    confirm_message=None,
    confirm_title=None,
    warning=None,
    autocall=None,
    retry=None,  # has structure
    poll=None,  # has structure
    params=None,  # has structure
):
    tmp = {
        f"actions/{action_name}/display/default/el/component": component,
        f"actions/{action_name}/display/default/el/label": label,
        f"actions/{action_name}/display/default/el/icon": icon,
        f"actions/{action_name}/display/default/el/title": title,
        f"actions/{action_name}/display/default/el/helptext": helptext,
        f"actions/{action_name}/display/default/el/primary": primary,
        f"actions/{action_name}/display/default/el/url": url,
        f"actions/{action_name}/display/default/el/self": is_self,
        f"actions/{action_name}/display/default/el/confirm_confirm_label": confirm_confirm_label,
        f"actions/{action_name}/display/default/el/confirm_cancel_label": confirm_cancel_label,
        f"actions/{action_name}/display/default/el/confirm_message": confirm_message,
        f"actions/{action_name}/display/default/el/confirm_title": confirm_title,
        f"actions/{action_name}/display/default/el/warning": warning,
        f"actions/{action_name}/display/default/el/autocall": autocall,
        f"actions/{action_name}/display/default/el/retry": retry,
        f"actions/{action_name}/display/default/el/poll": poll,
    }

    action_spec = {}
    for key, value in tmp.items():
        if value is not None:
            action_spec[key] = value

    param_mapping = {
        "ensure_no_input": "ensure-no-input",
        "contact_phone_field": "contact-phone-field",
        "contact_email_field": "contact-email-field",
        "message_subject": "message-subject",
        "reply_templates": "reply-templates",
    }

    if params:
        for key, value in params.items():
            key = param_mapping.get(key, key)
            action_spec.update({
                f"actions/{action_name}/component-params/{key}": value
            })

    return action_spec


def get_obj_interface(OBJ):
    INTERFACE = list(inspect.signature(OBJ).parameters.keys())

    def _add_to_params(kwargs, params):
        if not kwargs.get("params"):
            kwargs["params"] = {}
        for key, value in params.items():
            if key in kwargs["params"]:
                continue
            kwargs["params"][key] = value

    def _merge_to_kwargs(defaults, args, kwargs):
        if args:
            keys = INTERFACE[:len(args)]
            for key, value in zip(keys, args):
                kwargs[key] = value

        new_kwargs = {}
        new_kwargs.update(defaults)
        new_kwargs.update(kwargs)
        return new_kwargs

    def _clear_up_kwargs(kwargs):
        new_kwargs = {}
        params = {}
        for key, value in kwargs.items():
            if value is None:
                continue
            if key in INTERFACE:
                new_kwargs[key] = value
            else:
                params[key] = value
        if params:
            _add_to_params(new_kwargs, params)

        return new_kwargs

    def obj_interface(**defaults):
        """
        A decorator to create specialized OBJ functions with default arguments.
        """
        def decorator(func):
            def wrapper(*args, **kwargs):
                # Merge defaults with user-provided arguments
                kwargs = _merge_to_kwargs(defaults, args, kwargs)
                kwargs = func(kwargs)
                kwargs = _clear_up_kwargs(kwargs)
                return OBJ(**kwargs)
            return wrapper
        return decorator

    return obj_interface
